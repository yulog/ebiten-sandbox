# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Release

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'The name of the module directory to build (e.g., module1, my-tool)'
        required: true
        default: 'module1'
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
       include:
          # https://docs.github.com/ja/actions/concepts/runners/github-hosted-runners
          # https://github.com/actions/runner-images
          # https://github.com/actions/partner-runner-images
          # ubuntu-latest (amd64)
          - runner: ubuntu-latest
            goos: windows
            goarch: amd64
          - runner: ubuntu-latest
            goos: windows
            goarch: arm64
          - runner: ubuntu-latest
            goos: linux
            goarch: amd64
          - runner: ubuntu-latest
            goos: linux
            goarch: arm64
          # ubuntu-24.04-arm64
          # - runner: ubuntu-24.04-arm64
          #   goos: linux
          #   goarch: arm64
          # macos-13 (amd64)
          - runner: macos-13
            goos: darwin
            goarch: amd64
          # macos-14 (arm64)
          - runner: macos-14
            goos: darwin
            goarch: arm64

    runs-on: ${{ matrix.runner }}
    steps:
    - uses: actions/checkout@v4

    - uses: nao1215/actions-ebitengine@v0

    - name: apt source
      if: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' }}
      run: cat /etc/apt/sources.list.d/ubuntu.sources

    - name: Configure apt for multi-architecture
      if: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' }}
      run: |
        sudo sed -i '/^Components:/ aArchitectures: amd64' /etc/apt/sources.list.d/ubuntu.sources
        # arm64用のportsリポジトリをdeb822形式で追加
        cat <<EOF | sudo tee /etc/apt/sources.list.d/ubuntu-ports.sources
        Types: deb
        URIs: http://ports.ubuntu.com/ubuntu-ports
        Suites: noble noble-updates noble-backports noble-security
        Components: main restricted universe multiverse
        Architectures: arm64
        EOF

    - name: Install dependencies
      if: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' }}
      run: |
        sudo dpkg --add-architecture arm64
        sudo apt update
        sudo apt install -y \
          libx11-dev \
          libx11-dev:arm64 libxcursor-dev:arm64 libxi-dev:arm64 libxinerama-dev:arm64 libxrandr-dev:arm64 libxxf86vm-dev:arm64 libgl1-mesa-dev:arm64 libasound2-dev:arm64

    - name: Verify dependency installation
      if: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' }}
      run: |
        ls -l /usr/include/X11/Xlib.h
        ls -l /usr/lib/aarch64-linux-gnu/libX11.so
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        pkg-config --cflags x11
        pkg-config --libs x11

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: '${{ github.event.inputs.module_name }}/go.mod'
        # architecture: ${{ matrix.goarch }}

    - name: Run Mage
      if: ${{ !(runner.os == 'macOS' && runner.arch == 'ARM64') }}
      uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b
      with:
        version: latest
        install-only: true

    - name: Install Mage
      if: ${{ runner.os == 'macOS' && runner.arch == 'ARM64' }}
      run: |
        go install github.com/magefile/mage@latest
        mage -init

    # https://github.com/syncthing/syncthing/blob/7189a3ebffb7b7bd59bce510753bc6d97988eacd/.github/workflows/build-syncthing.yaml
    - name: Install Zig
      if: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' }}
      uses: mlugg/setup-zig@v2

    - name: Cross build
      run: mage -v cross ${{ matrix.goos }} ${{ matrix.goarch }}
      working-directory: ${{ github.event.inputs.module_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.goos }}_${{ matrix.goarch }}
        path: ${{ github.event.inputs.module_name }}/goxz/

  releases:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Run Mage
      uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b
      with:
        version: latest
        install-only: true

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.event.inputs.module_name }}/goxz

    - name: Create Release
      run: |
        ls -R
        mage -v upload
      working-directory: ${{ github.event.inputs.module_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
